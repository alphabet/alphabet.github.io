{"name":"Alphabet.github.io","tagline":"github pages repo","body":"### Integrated Git workflow\r\n\r\nI have been working at a medium size company for the past year, and although the environment is great the version control system is CVS. Fortunately we developers have a lot of freedom to create our own workflow and use whatever tools make us most productive at msc.\r\n\r\nThe environment is LEJ (Legacy Enterprise Java), which is Java/Spring, having business logic embedded in an RMI Service. This framework, combined with legacy version control software, ant/maven for builds and deploys, and Resin as the web server, makes front-end development quite cumbersome. So I put together the following workflow to get code from CVS to Git and vice-versa.\r\n\r\n```\r\n$ cd my_local_cvs_repo\r\n$ cvs update\r\n$ maven war (same as ant deploy, gets the build to the Resin web server)\r\n$ cd my_java_spring_deploy_dir\r\n$ git checkout master\r\n$ git commit -am'merge commit'\r\n$ git rebase my_topic_branch master\r\n$ git checkout my_topic_branch\r\n```\r\n### Doing work and committing, from Git to CVS\r\nStarting with the previous rebase step, I work and commit on my topic branch just as I would in my standard Git workflow. When I'm ready to move my code from Git to CVS\r\n```\r\n$ cd my_local_cvs_repo\r\n$ cvs update\r\n```\r\nThen, I use filemerge on OSX to compare the code in my topic branch with the code from the cvs_repo. I could deploy the code to the git master branch but in this case it's easier to simply filemerge. deploying the code to the git master branch takes about a minute. That's about 180 blinks too long, imo, plus it involves a couple of checkout/merge/rebase steps in the git directory.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"UA-45674907-1","note":"Don't delete this file! It's used internally to help with page regeneration."}